name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

env:
  PYTHON_VERSION: '3.13'

jobs:
  validate-pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort pytest

    - name: Check code formatting
      run: |
        echo "## Code Quality Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check Black formatting
        if black --check src/calculator.py src/calculator_gui.py; then
          echo "‚úÖ **Black formatting**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Black formatting**: FAILED" >> $GITHUB_STEP_SUMMARY
          echo "Run \`black src/calculator.py src/calculator_gui.py\` to fix formatting" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check import sorting
        if isort --check-only src/calculator.py src/calculator_gui.py; then
          echo "‚úÖ **Import sorting**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Import sorting**: FAILED" >> $GITHUB_STEP_SUMMARY
          echo "Run \`isort src/calculator.py src/calculator_gui.py\` to fix imports" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Lint code
      run: |
        # Basic linting
        if flake8 src/calculator.py src/calculator_gui.py --count --select=E9,F63,F7,F82 --show-source --statistics; then
          echo "‚úÖ **Critical linting**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Critical linting**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Style linting (non-blocking)
        flake8 src/calculator.py src/calculator_gui.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics > flake8-report.txt
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Linting Summary" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat flake8-report.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Run quick tests
      run: |
        if python -m pytest tests/test_calculator.py -v; then
          echo "‚úÖ **Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Check for breaking changes
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### File Changes" >> $GITHUB_STEP_SUMMARY
        
        # Get changed files
        CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
        
        echo "**Modified files:**" >> $GITHUB_STEP_SUMMARY
        for file in $CHANGED_FILES; do
          echo "- $file" >> $GITHUB_STEP_SUMMARY
        done
        
        # Check for critical file changes
        if echo "$CHANGED_FILES" | grep -q "src/calculator_gui.py"; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è **GUI calculator modified** - Ensure backward compatibility" >> $GITHUB_STEP_SUMMARY
        fi
        
        if echo "$CHANGED_FILES" | grep -q "requirements.txt"; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üì¶ **Dependencies changed** - Review new dependencies for security" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Security check
      run: |
        # Quick security scan on changed files
        pip install bandit
        
        CHANGED_PY_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep '\.py$' || true)
        
        if [ -n "$CHANGED_PY_FILES" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Scan" >> $GITHUB_STEP_SUMMARY
          
          if bandit $CHANGED_PY_FILES; then
            echo "‚úÖ **Security scan**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Security scan**: Issues found" >> $GITHUB_STEP_SUMMARY
          fi
        fi

  build-test:
    name: Test Build
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Test GUI build
      run: |
        pyinstaller --onefile --windowed src/calculator_gui.py --name "TestBuild"
        
        # Check if executable was created
        if (Test-Path "dist/TestBuild.exe") {
          Write-Output "‚úÖ **Build test**: PASSED" >> $env:GITHUB_STEP_SUMMARY
        } else {
          Write-Output "‚ùå **Build test**: FAILED" >> $env:GITHUB_STEP_SUMMARY
          exit 1
        }

    - name: Upload test build
      uses: actions/upload-artifact@v3
      with:
        name: pr-test-build
        path: dist/TestBuild.exe
        retention-days: 7

  comment-pr:
    name: Comment on PR
    runs-on: ubuntu-latest
    needs: [validate-pr, build-test]
    if: always()
    
    steps:
    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('## PR Validation Results')
          );
          
          const validationResult = '${{ needs.validate-pr.result }}';
          const buildResult = '${{ needs.build-test.result }}';
          
          let status = '‚úÖ All checks passed!';
          if (validationResult !== 'success' || buildResult !== 'success') {
            status = '‚ùå Some checks failed';
          }
          
          const body = `## PR Validation Results
          
          ${status}
          
          ### Check Results:
          - **Code Validation**: ${validationResult === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}
          - **Build Test**: ${buildResult === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}
          
          ### Next Steps:
          ${validationResult !== 'success' || buildResult !== 'success' ? 
            '- Review the failed checks above\n- Fix any issues and push updates\n- The checks will re-run automatically' :
            '- All checks passed! ‚úÖ\n- Ready for review and merge'}
          
          ---
          *This comment is automatically updated for each push to the PR*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }